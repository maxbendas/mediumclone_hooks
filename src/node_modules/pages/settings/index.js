import React from 'react';
import {CurrentUserContext} from "contexts/currentUser";
import {useContext, useState, useEffect} from "react";
import useFetch from "hooks/useFetch";
import BackendErrorMessages from "components/backendErrorMessages";
import useLocalStorage from "hooks/useLocalStorage";
import {Redirect} from "react-router-dom";

const Settings = () => {

    const [currentUserState, dispatch] = useContext(CurrentUserContext)
    const apiUrl = '/user'
    const [{response, error}, doFetch] = useFetch(apiUrl)
    const [,setToken] = useLocalStorage('token')

    const [image, setImage] = useState('')
    const [username, setUsername] = useState('')
    const [bio, setBio] = useState('')
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')

    const [isSuccessfullLogout, setIsSuccessfulLogout] = useState(false)

    const handleSubmit = (e) => {
        e.preventDefault()
        doFetch({
            method: 'put',
            data: {
                user: {
                    ...currentUserState.currentUser,
                    image,
                    username,
                    bio,
                    email,
                    password
                }
            }
        })
    }
    const logout = (e) => {
        e.preventDefault()
        setToken('')
        dispatch({type:'LOGOUT'})
        setIsSuccessfulLogout(true)
    }
    useEffect(() => {
        if (!currentUserState.currentUser) {
            return
        }
        setImage(currentUserState.currentUser.image)
        setUsername(currentUserState.currentUser.username)
        setBio(currentUserState.currentUser.bio)
        setEmail(currentUserState.currentUser.email)
        // setPassword(currentUserState.currentUser.password)
    }, [currentUserState.currentUser])

    useEffect(() => {
        if (!response) {
            return
        }
        dispatch({type:'SET_AUTHORIZED', payload:response.user})
    }, [response, dispatch])

    if (isSuccessfullLogout) {
        return <Redirect to='/'/>
    }

    return (
        <div className="editor-page">
            <div className="container page">
                <div className="row">
                    <div className="col-md-10 offset-md-1 col-xs-12">
                        <h1 className="text-xs-center">Your settings</h1>
                        {error && <BackendErrorMessages backendErrors={error.errors}/>}
                        <form onSubmit={handleSubmit}>
                            <fieldset>
                                <fieldset className="form-group">
                                    <input type="text"
                                           className='form-control form-control-lg'
                                           placeholder='URL of profile picture'
                                           value={image}
                                           onChange={e => setImage(e.target.value)}
                                    />
                                </fieldset>
                                <fieldset className="form-group">
                                    <input type="text"
                                           className='form-control form-control-lg'
                                           placeholder='Username'
                                           value={username}
                                           onChange={e => setUsername(e.target.value)}
                                    />
                                </fieldset>
                                <fieldset className="form-group">
                                    <textarea rows='4'
                                              className='form-control form-control-lg'
                                              placeholder='Short bio about you'
                                              value={bio}
                                              onChange={e => setBio(e.target.value)}
                                    >
                                    </textarea>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input className="form-control form-control-lg"
                                           placeholder="Email"
                                           type="email"
                                           value={email}
                                           onChange={e => setEmail(e.target.value)}
                                    />
                                </fieldset>
                                <fieldset className="form-group">
                                    <input className="form-control form-control-lg"
                                           placeholder="Password"
                                           type="password"
                                           value={password}
                                           onChange={e => setPassword(e.target.value)}
                                    />
                                </fieldset>
                                <fieldset className="form-group">
                                    <button
                                        type='submit'
                                        className="btn btn-lg pull-xs-right btn-primary">
                                        Update Settings
                                    </button>
                                </fieldset>
                            </fieldset>
                        </form>
                        <hr/>
                        <button
                            className="btn btn-outline-danger"
                            onClick={logout}>
                            Or click here to logout.
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Settings;